from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ccf34247e04a"
down_revision: str | None = "9a4f26c0869a"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "linked_accounts", "connected_at", existing_type=postgresql.TIMESTAMP(), type_=sa.DateTime(timezone=True), existing_nullable=False
    )
    op.create_unique_constraint(None, "linked_accounts", ["linked_account_id"])
    op.drop_constraint("users_phone_key", "users", type_="unique")
    op.create_unique_constraint(None, "users", ["user_id"])
    op.drop_column("users", "phone")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("users", sa.Column("phone", sa.BIGINT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, "users", type_="unique")
    op.create_unique_constraint("users_phone_key", "users", ["phone"])
    op.drop_constraint(None, "linked_accounts", type_="unique")
    op.alter_column(
        "linked_accounts", "connected_at", existing_type=sa.DateTime(timezone=True), type_=postgresql.TIMESTAMP(), existing_nullable=False
    )
    # ### end Alembic commands ###
